name: Full CI/CD Pipeline with Frontend Go Unit Tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v3

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2

    - name: Log in to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Run Unit Tests on Frontend Service (Go)
      run: |
        cd ./src/frontend || exit 1
        go mod download
        go test ./... -v || exit 1
        cd ../../

    - name: Build and Push Docker Images for All Services
    # services=("frontend" "checkoutservice" "currencyservice" "emailservice" "paymentservice" "productcatalogservice" "recommendationservice" "shippingservice")
      run: |
        services=("frontend")
        for svc in "${services[@]}"; do
          IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/$svc:latest"
          echo "Building image for $svc: $IMAGE_TAG"
          docker build --no-cache -t $IMAGE_TAG -f ./src/$svc/Dockerfile ./src/$svc || exit 1
          docker push $IMAGE_TAG || exit 1
        done
   # - name: Build and Push Images for cartservice    
   #   run: |
   #     services=("cartservice")
   #     for svc in "${services[@]}"; do
   #       IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/$svc:latest"
   #       echo "Building image for $svc: $IMAGE_TAG"
   #       docker build -t $IMAGE_TAG -f ./src/$svc/src/Dockerfile ./src/$svc/src || exit 1
   #       docker push $IMAGE_TAG || exit 1
   #    done


   # 1. Trivy Scan Docker Image
    - name: Trivy Scan Docker Image for Vulnerabilities
      uses: aquasecurity/trivy-action@0.33.1
      with:
        image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
        format: 'table'
        output: trivy-image-report.txt
        exit-code: 0
        severity: 'CRITICAL,HIGH'

    - name: Print Trivy Image Scan Results
      run: cat trivy-image-report.txt

  # 2. Trivy Secret Scan (Source Code)
    - name: Trivy Secret Scan (Source Code)
      uses: aquasecurity/trivy-action@0.33.1
      with:
        scan-type: 'fs'
        scan-ref: '.'
        skip-dirs: 'vendor,node_modules'
        format: 'table'
        output: trivy-secrets-report.txt
        exit-code: 0
        severity: 'CRITICAL,HIGH'

    - name: Print Trivy Secrets Scan Results
      run: cat trivy-secrets-report.txt

# 3. Trivy Kubernetes Manifest Scan
    - name: Trivy Kubernetes Manifest Scan (Misconfigurations)
      uses: aquasecurity/trivy-action@0.33.1
      with:
        scan-type: 'config'
        scan-ref: './release/kubernetes-manifests.yaml'
        format: 'table'
        output: trivy-k8s-report.txt
        exit-code: 0

    - name: Print Trivy K8s Manifest Scan Results
      run: cat trivy-k8s-report.txt

# Emailing all scan reports

    - name: Send email with scan reports
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.mailersend.net
        server_port: 587
        secure: true
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "DevSecOps Scan Reports"
        to: vijayendrapranesh.hunasgi@gmail.com
        from: MS_yk11GY@test-q3enl6kv13842vwr.mlsender.net
        body: |
          Please find attached the DevSecOps scan reports.
        attachments: trivy-image-report.txt,trivy-secrets-report.txt,trivy-k8s-report.txt

    - name: Azure CLI Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Get AKS Credentials
      run: |
        az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

    - name: Update Kubernetes Manifests with Docker Hub Image Tags
      run: |
        for svc in "${services[@]}"; do
          sed -i "s|image: .*/$svc:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/$svc:latest|g" ./release/kubernetes-manifests.yaml
        done

    - name: Deploy to AKS
      run: |
        kubectl delete deployment frontend --ignore-not-found=true 
        kubectl apply -f ./release/kubernetes-manifests.yaml
        kubectl rollout restart deployment/frontend

    - name: Wait for Deployments to Complete
      run: |
        kubectl rollout status deployment/frontend

    - name: Smoke Test Frontend Service
      run: |
        FRONTEND_IP=$(kubectl get service frontend-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
        echo "Frontend External IP: $FRONTEND_IP"
        for i in {1..5}; do
          curl -f http://$FRONTEND_IP && break || sleep 10
        done
