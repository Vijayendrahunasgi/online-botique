name: Full CI/CD Pipeline with Frontend Go Unit Tests

on:
  push:
    branches:
      - main
  pull_request:

env:
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}

jobs:
  aks-check:
    runs-on: ubuntu-latest
    outputs:
      cluster_exists: ${{ steps.check.outputs.exists }}
    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Check if AKS cluster exists
        id: check
        run: |
          if az aks show --name boutique-aks --resource-group boutique-rg > /dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

  terraform:
    runs-on: ubuntu-latest
    needs: aks-check
    if: needs.aks-check.outputs.cluster_exists == 'false'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2

      - name: Terraform Init
        run:  |
          cd terraform
          terraform init

      - name: Terraform Validate
        run: |
          cd terraform
          terraform Validate
      
      - name: Terraform apply
        run: |
          cd terraform
          terraform apply -auto-approve

  checkout-build:
    runs-on: ubuntu-latest
    needs: [aks-check, terraform]
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

  unit-test:
    runs-on: ubuntu-latest
    needs: checkout-build
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Run Unit Tests on Frontend Service (Go)
        run: |
          cd ./src/frontend || exit 1
          go mod download
          go test ./... -v || exit 1
          cd ../../

  docker-build-push:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push Docker Images for All Services
        run: |
          services=("frontend")
          for svc in "${services[@]}"; do
            IMAGE_TAG="${{ secrets.DOCKERHUB_USERNAME }}/$svc:latest"
            echo "Building image for $svc: $IMAGE_TAG"
            docker build --no-cache -t $IMAGE_TAG -f ./src/$svc/Dockerfile ./src/$svc || exit 1
            docker push $IMAGE_TAG || exit 1
          done

  trivy-scan:
    runs-on: ubuntu-latest
    needs: docker-build-push
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Trivy Scan Docker Image for Vulnerabilities
        uses: aquasecurity/trivy-action@0.33.1
        with:
          image-ref: ${{ secrets.DOCKERHUB_USERNAME }}/frontend:latest
          format: 'table'
          output: trivy-image-report.txt
          exit-code: 0
          severity: 'CRITICAL,HIGH'

      - name: Print Trivy Image Scan Results
        run: cat trivy-image-report.txt

      - name: Trivy Secret Scan (Source Code)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'fs'
          scan-ref: '.'
          skip-dirs: 'vendor,node_modules'
          format: 'table'
          output: trivy-secrets-report.txt
          exit-code: 0
          severity: 'CRITICAL,HIGH'

      - name: Print Trivy Secrets Scan Results
        run: cat trivy-secrets-report.txt

      - name: Trivy Kubernetes Manifest Scan (Misconfigurations)
        uses: aquasecurity/trivy-action@0.33.1
        with:
          scan-type: 'config'
          scan-ref: './release/kubernetes-manifests.yaml'
          format: 'table'
          output: trivy-k8s-report.txt
          exit-code: 0

      - name: Print Trivy K8s Manifest Scan Results
        run: cat trivy-k8s-report.txt

      - name: Upload scan reports
        uses: actions/upload-artifact@v4
        with:
          name: scan-reports
          path: |
            trivy-image-report.txt
            trivy-secrets-report.txt
            trivy-k8s-report.txt

  k8s-deploy:
    runs-on: ubuntu-latest
    needs: trivy-scan
    steps:
      - name: Checkout Source Code
        uses: actions/checkout@v3

      - name: Azure CLI Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get AKS Credentials
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Update Kubernetes Manifests with Docker Hub Image Tags
        run: |
          services=("frontend")
          for svc in "${services[@]}"; do
            sed -i "s|image: .*/$svc:.*|image: ${{ secrets.DOCKERHUB_USERNAME }}/$svc:latest|g" ./release/kubernetes-manifests.yaml
          done

      - name: Deploy to AKS
        run: |
          kubectl delete deployment frontend --ignore-not-found=true 
          kubectl apply -f ./release/kubernetes-manifests.yaml
          kubectl rollout restart deployment/frontend

      - name: Wait for Deployments to Complete
        run: |
          kubectl rollout status deployment/frontend

  smoke-test:
    runs-on: ubuntu-latest
    needs: k8s-deploy
    steps:
      - name: Smoke Test Frontend Service
        run: |
          FRONTEND_IP=$(kubectl get service frontend-external -o jsonpath='{.status.loadBalancer.ingress[0].ip}')
          echo "Frontend External IP: $FRONTEND_IP"
          for i in {1..5}; do
            curl -f http://$FRONTEND_IP && break || sleep 10
          done

  send-email:
    runs-on: ubuntu-latest
    needs: smoke-test
    steps:
      - name: Download scan reports
        uses: actions/download-artifact@v4
        with:
          name: scan-reports
          path: ./scan-reports

      - name: Concatenate scan reports
        run: |
          cat ./scan-reports/trivy-image-report.txt > full-scan-report.txt
          echo -e "\n\n" >> full-scan-report.txt
          cat ./scan-reports/trivy-secrets-report.txt >> full-scan-report.txt
          echo -e "\n\n" >> full-scan-report.txt
          cat ./scan-reports/trivy-k8s-report.txt >> full-scan-report.txt

      - name: Install swaks
        run: sudo apt-get update && sudo apt-get install -y swaks

      - name: Send email with attachments
        env:
          SMTP_USERNAME: ${{ secrets.SMTP_USERNAME }}
          SMTP_PASSWORD: ${{ secrets.SMTP_PASSWORD }}
        run: |
          swaks --to vijayendrapranesh.hunasgi@gmail.com \
                --from MS_yk11GY@test-q3enl6kv13842vwr.mlsender.net \
                --server smtp.mailersend.net \
                --port 587 \
                --auth LOGIN \
                --auth-user "$SMTP_USERNAME" \
                --auth-password "$SMTP_PASSWORD" \
                --tls \
                --header "Subject: DevSecOps Scan Reports" \
                --body "$(cat full-scan-report.txt)"
